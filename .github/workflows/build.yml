name: Build
on:
  push:
    branches:
      - '**'
    tags:
      - '*.*.*'
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'Dockerfile.slim'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/build.yml'

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      DOCKER_REGISTRY: ghcr.io
      DOCKER_IMAGE_NAME: ${{ github.repository }}

    strategy:
      matrix:
        image:
          # - name: default
          #   suffix: ''
          #   platforms: linux/amd64,linux/arm64
          #   dockerfile: Dockerfile
          #   build_args: 'PYTEZOS=0'

          # - name: pytezos
          #   suffix: -pytezos
          #   platforms: linux/amd64,linux/arm64
          #   dockerfile: Dockerfile
          #   build_args: 'PYTEZOS=1'

          - name: slim
            suffix: ''
            dockerfile: Dockerfile.slim
            platforms: linux/amd64,linux/arm64
            build_args: ''

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Log in to the registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          flavor: |
            latest=false
            suffix={{ matrix.image.suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag

      - name: Publish nightly image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ matrix.image.dockerfile }}
          platforms: ${{ matrix.image.platforms }}
          push: true
          cache-from: type=gha,scope={{ matrix.image.name }}
          cache-to: type=gha,scope={{ matrix.image.name }},mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.image.build_args }}
