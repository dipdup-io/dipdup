"""Replaces {{ cookiecutter... }} placeholders with default values from cookiecutter.json"""
import json
from os.path import dirname, join
import re
import sys

COOKIECUTTER_REGEX = r'{{ *cookiecutter\.(\w*) *}}'

def _preprocess_content(text: str, defaults: dict[str, str]) -> str:
    for path in re.findall(COOKIECUTTER_REGEX, text):
        path = path.strip()
        value = defaults[path]
        if isinstance(value, list):
            value = value[0]
        text = re.sub(COOKIECUTTER_REGEX, value, text, count=1)

    return text


def _preprocess_chapter(section: dict, defaults: dict[str, str]) -> dict:
    """Preprocesses a chapter section recursively."""
    if chapter := section.get('Chapter'):
        chapter['content'] = _preprocess_content(chapter['content'], defaults)
        chapter['sub_items'] = [_preprocess_chapter(item, defaults) for item in chapter['sub_items']]
    return section


if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == 'supports':
            sys.exit(0)

    with open(join(dirname(__file__), '..', 'cookiecutter', 'cookiecutter.json')) as file:
        defaults = json.load(file)

    text = sys.stdin.read()

    try:
        context, book = json.loads(text)
        for section in book.get('sections', ()):
            _preprocess_chapter(section, defaults)

        print(json.dumps(book), end='')

    except json.decoder.JSONDecodeError:
        print(_preprocess_content(text, defaults))