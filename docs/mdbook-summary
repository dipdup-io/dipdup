#$python
import json
import logging
import re
import sys

SUMMARY_REGEX = r'{{ *#summary (.*) *}}'
logging.basicConfig(level=logging.INFO)

def _parse_summary() -> dict[str, str]:
    links: dict[str, str] = {}
    version: list[int] = []
    with open('SUMMARY.md') as f:
        for line in f:
            if '* [' not in line:
                continue

            depth = int((len(line) - len(line.lstrip())) / 2) + 1
            if depth > len(version):
                version += [0] * (depth - len(version))

            version[depth - 1] += 1
            for i in range(depth, len(version)):
                version[i] = 0

            prefix = '.'.join(str(v) for v in version[:depth]) + '.'
            text, url = re.findall(r'\[(.*?)\]\((.*?)\)', line)[0]
            links[url] = f'{prefix} {text}'

    return links

def _preprocess_content(text: str, links: dict[str, str], depth: int) -> str:
    # Replace {{ #summary ...}} placeholders with links from SUMMARY.md
    for path in re.findall(SUMMARY_REGEX, text):
        path = path.strip()

        anchor = ''
        if '#' in path:
            path, anchor = path.split('#')

        full_path = '/'.join(['..'] * depth + [path])
        try:
            title = links[path]
        except KeyError:
            print(f'==> Missing link for `{path}` in SUMMARY.md', file=sys.stderr)
            quit(1)

        if anchor:
            title += f' â†’ {anchor}'
            anchor = f'#{anchor}'

        url = f'[{title}]({full_path}{anchor})'.replace('README.md', 'index.md')
        text = re.sub(SUMMARY_REGEX, url, text, count=1)

    return text

def _preprocess_section(section: dict, links: dict[str, str], depth: int) -> dict:
    if chapter := section.get('Chapter'):
        chapter['content'] = _preprocess_content(chapter['content'], links, depth)
        chapter['sub_items'] = [_preprocess_section(item, links, depth + 1) for item in chapter['sub_items']]
    return section

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == 'supports': 
            sys.exit(0)

    links = _parse_summary()
    context, book = json.load(sys.stdin)
    for item in book.get('sections', ()):
        _preprocess_section(item, links, 1)
        
    print(json.dumps(book), end='')
