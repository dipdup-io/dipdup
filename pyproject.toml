[project]
name = "dipdup"
description = "Modular framework for creating selective indexers and featureful backends for dapps"
version = "6.5.5"
license = { text = "MIT" }
authors = [
    { name = "Lev Gorodetskii", email = "dipdup@drsr.io" },
    { name = "Michael Zaikin", email = "mz@baking-bad.org" },
]
readme = "README.md"
requires-python = ">=3.11,<3.12"
keywords = [
    "tezos",
    "blockchain",
    "sdk",
    "michelson",
    "indexers",
    "tzkt",
    "cryptocurrencies",
    "smart-contracts",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]

dependencies = [
    # NOTE: Core dependencies are pinned to exact versions to avoid breaking changes
    "asyncpg===0.27.0",
    "datamodel-code-generator===0.20.0",
    "pydantic===1.10.9",
    "tortoise-orm===0.19.3",

    "aiohttp~=3.8",
    "aiolimiter~=1.0",
    "anyio~=3.3",
    "APScheduler~=3.8",
    "async-lru~=2.0",
    "asyncclick~=8.0",
    "eth-abi~=4.0",
    "orjson~=3.6",
    "prometheus-client~=0.17",
    "pyarrow~=12.0",
    "pycryptodome~=3.17",
    "pyhumps~=3.0",
    "pysignalr~=0.2",
    "python-dotenv~=1.0",
    "ruamel.yaml~=0.17",
    "sentry-sdk~=1.4",
    "sqlparse~=0.4",
    "survey~=4.4",
    "tabulate~=0.9",
    "web3~=6.2",
]

[project.urls]
Homepage = "https://dipdup.io/"
Documentation = "https://docs.dipdup.io"
Repository = "https://github.com/dipdup-io/dipdup"

[project.scripts]
dipdup = "dipdup.cli:cli"

[tool.pdm.dev-dependencies]
dev = [
    "black",
    "docker",
    "isort",
    "mypy",
    "pprofile",
    "pytest",
    "pytest-aiohttp",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
    "Sphinx",
    "sphinx-click",
    "sphinx-markdown-builder",
    "types-pytz",
    "types-tabulate",
    "watchdog",
]

[tool.pdm.scripts]
_isort = "isort src tests scripts"
_black = "black src tests scripts"
_ruff = "ruff check --fix src tests scripts"
_mypy = "mypy src tests scripts"
all = { composite = ["fmt", "lint", "test"] }
fmt = { composite = ["_isort", "_black"] }
lint = { composite = ["_ruff", "_mypy"] }
test = "pytest --cov-report=term-missing --cov=dipdup --cov-report=xml -n auto -s -v tests"
image = "docker buildx build . --load --progress plain -t dipdup:latest"
clean = "git clean -xdf --exclude=.venv"
demos = { shell = """
	python scripts/update_demos.py
	python scripts/init_demos.py
    pdm run fmt
    pdm run lint
""" }
docs_serve = { shell = """
	sh -c 'cd   && npm run dev' & NPM_PID=$$!
	pdm run docs_watch
	kill $$NPM_PID
""" }
docs_watch = { shell = """
	"python scripts/watch_docs.py --source docs --destination {args:../interface}/content/docs"
""" }

[tool.pdm.build.targets.wheel]
packages = ["src/dipdup"]

[tool.isort]
line_length = 120
force_single_line = true

[tool.black]
line-length = 120
target-version = ["py311"]
skip-string-normalization = true

[tool.ruff]
line-length = 120
ignore = ["E402", "E501", "B905"]
target-version = "py311"
extend-select = ["B", "C4", "PTH", "Q"]                                   # todo: G, RET, RUF, S, TCH
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy"]
strict = true

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise FrameworkError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
