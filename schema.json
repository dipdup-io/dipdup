{
  "$defs": {
    "AbiDatasourceConfig": {
      "description": "Provider of EVM contract ABIs. Datasource kind starts with 'abi.'",
      "properties": {},
      "title": "AbiDatasourceConfig",
      "type": "object"
    },
    "AbiEtherscanDatasourceConfig": {
      "description": "Etherscan datasource config\n\n:param kind: always 'abi.etherscan'\n:param url: API URL\n:param api_key: API key\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "abi.etherscan",
          "title": "Kind"
        },
        "url": {
          "default": "https://api.etherscan.io/api",
          "title": "Url",
          "type": "string"
        },
        "api_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Api Key"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind"
      ],
      "title": "AbiEtherscanDatasourceConfig",
      "type": "object"
    },
    "AdvancedConfig": {
      "description": "This section allows users to tune some system-wide options, either experimental or unsuitable for generic configurations.\n\n:param reindex: Mapping of reindexing reasons and actions DipDup performs.\n:param scheduler: `apscheduler` scheduler config.\n:param postpone_jobs: Do not start job scheduler until all indexes reach the realtime state.\n:param early_realtime: Establish realtime connection and start collecting messages while sync is in progress (faster, but consumes more RAM).\n:param skip_version_check: Disable warning about running unstable or out-of-date DipDup version.\n:param rollback_depth: A number of levels to keep for rollback.\n:param decimal_precision: Overwrite precision if it's not guessed correctly based on project models.\n:param unsafe_sqlite: Disable journaling and data integrity checks. Use only for testing.\n:param alt_operation_matcher: Use different algorithm to match Tezos operations (dev only)",
      "properties": {
        "reindex": {
          "additionalProperties": {
            "$ref": "#/$defs/ReindexingAction"
          },
          "title": "Reindex",
          "type": "object"
        },
        "scheduler": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Scheduler"
        },
        "postpone_jobs": {
          "default": false,
          "title": "Postpone Jobs",
          "type": "boolean"
        },
        "early_realtime": {
          "default": false,
          "title": "Early Realtime",
          "type": "boolean"
        },
        "skip_version_check": {
          "default": false,
          "title": "Skip Version Check",
          "type": "boolean"
        },
        "rollback_depth": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Rollback Depth"
        },
        "decimal_precision": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Decimal Precision"
        },
        "unsafe_sqlite": {
          "default": false,
          "title": "Unsafe Sqlite",
          "type": "boolean"
        },
        "alt_operation_matcher": {
          "default": false,
          "title": "Alt Operation Matcher",
          "type": "boolean"
        }
      },
      "title": "AdvancedConfig",
      "type": "object"
    },
    "ApiConfig": {
      "description": "Management API config\n\n:param host: Host to bind to\n:param port: Port to bind to",
      "properties": {
        "host": {
          "default": "127.0.0.1",
          "title": "Host",
          "type": "string"
        },
        "port": {
          "default": 46339,
          "title": "Port",
          "type": "integer"
        }
      },
      "title": "ApiConfig",
      "type": "object"
    },
    "CoinbaseDatasourceConfig": {
      "description": "Coinbase datasource config\n\n:param kind: always 'coinbase'\n:param api_key: API key\n:param secret_key: API secret key\n:param passphrase: API passphrase\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "coinbase",
          "title": "Kind"
        },
        "api_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Api Key"
        },
        "secret_key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Secret Key"
        },
        "passphrase": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Passphrase"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind"
      ],
      "title": "CoinbaseDatasourceConfig",
      "type": "object"
    },
    "EvmContractConfig": {
      "description": "EVM contract config\n\n:param kind: Always `evm`\n:param address: Contract address\n:param abi: Contract ABI\n:param typename: Alias for the contract script",
      "properties": {
        "kind": {
          "const": "evm",
          "title": "Kind"
        },
        "address": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Address"
        },
        "abi": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Abi"
        },
        "typename": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Typename"
        }
      },
      "required": [
        "kind"
      ],
      "title": "EvmContractConfig",
      "type": "object"
    },
    "EvmNodeDatasourceConfig": {
      "description": "Subsquid datasource config\n\n:param kind: Always 'evm.node'\n:param url: Ethereum node URL\n:param ws_url: Ethereum node WebSocket URL\n:param http: HTTP client configuration\n:param rollback_depth: A number of blocks to store in database for rollback",
      "properties": {
        "kind": {
          "const": "evm.node",
          "title": "Kind"
        },
        "url": {
          "title": "Url",
          "type": "string"
        },
        "ws_url": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Ws Url"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "rollback_depth": {
          "default": 32,
          "title": "Rollback Depth",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "url"
      ],
      "title": "EvmNodeDatasourceConfig",
      "type": "object"
    },
    "EvmSubsquidDatasourceConfig": {
      "description": "Subsquid datasource config\n\n:param kind: always 'evm.subsquid'\n:param url: URL of Subsquid Network API\n:param node: One or more `evm.node` datasource(s) for the same network\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "evm.subsquid",
          "title": "Kind"
        },
        "url": {
          "title": "Url",
          "type": "string"
        },
        "node": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "$ref": "#/$defs/EvmNodeDatasourceConfig"
            },
            {
              "items": {
                "$ref": "#/$defs/EvmNodeDatasourceConfig"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Node"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind",
        "url"
      ],
      "title": "EvmSubsquidDatasourceConfig",
      "type": "object"
    },
    "EvmSubsquidEventsHandlerConfig": {
      "description": "Subsquid event handler\n\n:param callback: Callback name\n:param contract: EVM contract\n:param name: Event name",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmContractConfig"
            }
          ],
          "title": "Contract"
        },
        "name": {
          "title": "Name",
          "type": "string"
        }
      },
      "required": [
        "callback",
        "contract",
        "name"
      ],
      "title": "EvmSubsquidEventsHandlerConfig",
      "type": "object"
    },
    "EvmSubsquidEventsIndexConfig": {
      "description": "Subsquid datasource config\n\n:param kind: Always 'evm.subsquid.events'\n:param datasource: Subsquid datasource\n:param handlers: Event handlers\n:param abi: One or more `evm.abi` datasource(s) for the same network\n:param node_only: Don't use Subsquid Network API (dev only)\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing and disable this index",
      "properties": {
        "kind": {
          "const": "evm.subsquid.events",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmSubsquidDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/EvmSubsquidEventsHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "abi": {
          "anyOf": [
            {
              "$ref": "#/$defs/AbiDatasourceConfig"
            },
            {
              "items": {
                "$ref": "#/$defs/AbiDatasourceConfig"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Abi"
        },
        "node_only": {
          "default": false,
          "title": "Node Only",
          "type": "boolean"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource"
      ],
      "title": "EvmSubsquidEventsIndexConfig",
      "type": "object"
    },
    "EvmSubsquidTracesHandlerConfig": {
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        }
      },
      "required": [
        "callback"
      ],
      "title": "EvmSubsquidTracesHandlerConfig",
      "type": "object"
    },
    "EvmSubsquidTracesIndexConfig": {
      "properties": {
        "kind": {
          "const": "evm.subsquid.traces",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmSubsquidDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/EvmSubsquidTracesHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "abi": {
          "anyOf": [
            {
              "$ref": "#/$defs/AbiDatasourceConfig"
            },
            {
              "items": {
                "$ref": "#/$defs/AbiDatasourceConfig"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Abi"
        },
        "node_only": {
          "default": false,
          "title": "Node Only",
          "type": "boolean"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource",
        "handlers"
      ],
      "title": "EvmSubsquidTracesIndexConfig",
      "type": "object"
    },
    "EvmSubsquidTransactionsHandlerConfig": {
      "description": "Subsquid transaction handler\n\n:param callback: Callback name\n:param from_: Transaction sender\n:param to: Transaction receiver\n:param method: Method name",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "from_": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "From "
        },
        "to": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "To"
        },
        "method": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Method"
        }
      },
      "required": [
        "callback"
      ],
      "title": "EvmSubsquidTransactionsHandlerConfig",
      "type": "object"
    },
    "EvmSubsquidTransactionsIndexConfig": {
      "description": "Index that uses Subsquid Network as a datasource for transactions\n\n:param kind: always 'evm.subsquid.transactions'\n:param datasource: Subsquid datasource config\n:param handlers: Transaction handlers\n:param abi: One or many ABI datasource(s)\n:param node_only: Don't use Subsquid Network, only node RPC\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "evm.subsquid.transactions",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/EvmSubsquidDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/EvmSubsquidTransactionsHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "abi": {
          "anyOf": [
            {
              "$ref": "#/$defs/AbiDatasourceConfig"
            },
            {
              "items": {
                "$ref": "#/$defs/AbiDatasourceConfig"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Abi"
        },
        "node_only": {
          "default": false,
          "title": "Node Only",
          "type": "boolean"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource",
        "handlers"
      ],
      "title": "EvmSubsquidTransactionsIndexConfig",
      "type": "object"
    },
    "HasuraConfig": {
      "description": "Config for the Hasura integration.\n\n:param url: URL of the Hasura instance.\n:param admin_secret: Admin secret of the Hasura instance.\n:param create_source: Whether source should be added to Hasura if missing.\n:param source: Hasura source for DipDup to configure, others will be left untouched.\n:param select_limit: Row limit for unauthenticated queries.\n:param allow_aggregations: Whether to allow aggregations in unauthenticated queries.\n:param allow_inconsistent_metadata: Whether to ignore errors when applying Hasura metadata.\n:param camel_case: Whether to use camelCase instead of default pascal_case for the field names.\n:param rest: Enable REST API both for autogenerated and custom queries.\n:param http: HTTP connection tunables",
      "properties": {
        "url": {
          "title": "Url",
          "type": "string"
        },
        "admin_secret": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Admin Secret"
        },
        "create_source": {
          "default": false,
          "title": "Create Source",
          "type": "boolean"
        },
        "source": {
          "default": "default",
          "title": "Source",
          "type": "string"
        },
        "select_limit": {
          "default": 1000,
          "title": "Select Limit",
          "type": "integer"
        },
        "allow_aggregations": {
          "default": true,
          "title": "Allow Aggregations",
          "type": "boolean"
        },
        "allow_inconsistent_metadata": {
          "default": false,
          "title": "Allow Inconsistent Metadata",
          "type": "boolean"
        },
        "camel_case": {
          "default": false,
          "title": "Camel Case",
          "type": "boolean"
        },
        "rest": {
          "default": true,
          "title": "Rest",
          "type": "boolean"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "url"
      ],
      "title": "HasuraConfig",
      "type": "object"
    },
    "HookConfig": {
      "description": "Hook config\n\n:param callback: Callback name\n:param args: Mapping of argument names and annotations (checked lazily when possible)\n:param atomic: Wrap hook in a single database transaction",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "args": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Args",
          "type": "object"
        },
        "atomic": {
          "default": false,
          "title": "Atomic",
          "type": "boolean"
        }
      },
      "required": [
        "callback"
      ],
      "title": "HookConfig",
      "type": "object"
    },
    "HttpConfig": {
      "description": "Advanced configuration of HTTP client\n\n:param retry_count: Number of retries after request failed before giving up\n:param retry_sleep: Sleep time between retries\n:param retry_multiplier: Multiplier for sleep time between retries\n:param ratelimit_rate: Number of requests per period (\"drops\" in leaky bucket)\n:param ratelimit_period: Time period for rate limiting in seconds\n:param ratelimit_sleep: Sleep time between requests when rate limit is reached\n:param connection_limit: Number of simultaneous connections\n:param connection_timeout: Connection timeout in seconds\n:param request_timeout: Request timeout in seconds\n:param batch_size: Number of items fetched in a single paginated request (when applicable)\n:param polling_interval: Interval between polling requests in seconds (when applicable)\n:param replay_path: Use cached HTTP responses instead of making real requests (dev only)\n:param alias: Alias for this HTTP client (dev only)",
      "properties": {
        "retry_count": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Retry Count"
        },
        "retry_sleep": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Retry Sleep"
        },
        "retry_multiplier": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Retry Multiplier"
        },
        "ratelimit_rate": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Ratelimit Rate"
        },
        "ratelimit_period": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Ratelimit Period"
        },
        "ratelimit_sleep": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Ratelimit Sleep"
        },
        "connection_limit": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Connection Limit"
        },
        "connection_timeout": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Connection Timeout"
        },
        "request_timeout": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Request Timeout"
        },
        "batch_size": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Batch Size"
        },
        "polling_interval": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Polling Interval"
        },
        "replay_path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Replay Path"
        },
        "alias": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Alias"
        }
      },
      "title": "HttpConfig",
      "type": "object"
    },
    "HttpDatasourceConfig": {
      "description": "Generic HTTP datasource config\n\n:param kind: always 'http'\n:param url: URL to fetch data from\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "http",
          "title": "Kind"
        },
        "url": {
          "title": "Url",
          "type": "string"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind",
        "url"
      ],
      "title": "HttpDatasourceConfig",
      "type": "object"
    },
    "IndexTemplateConfig": {
      "description": "Index template config\n\n:param kind: always 'template'\n:param values: Values to be substituted in template (`<key>` -> `value`)\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at\n:param template: Template alias in `templates` section",
      "properties": {
        "template": {
          "title": "Template",
          "type": "string"
        },
        "values": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Values",
          "type": "object"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "template",
        "values"
      ],
      "title": "IndexTemplateConfig",
      "type": "object"
    },
    "IpfsDatasourceConfig": {
      "description": "IPFS datasource config\n\n:param kind: always 'ipfs'\n:param url: IPFS node URL, e.g. https://ipfs.io/ipfs/\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "ipfs",
          "title": "Kind"
        },
        "url": {
          "default": "https://ipfs.io/ipfs",
          "title": "Url",
          "type": "string"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind"
      ],
      "title": "IpfsDatasourceConfig",
      "type": "object"
    },
    "JobConfig": {
      "description": "Job schedule config\n\n:param hook: Name of hook to run\n:param args: Arguments to pass to the hook\n:param crontab: Schedule with crontab syntax (`* * * * *`)\n:param interval: Schedule with interval in seconds\n:param daemon: Run hook as a daemon (never stops)",
      "properties": {
        "hook": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/HookConfig"
            }
          ],
          "title": "Hook"
        },
        "args": {
          "title": "Args",
          "type": "object"
        },
        "crontab": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Crontab"
        },
        "interval": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Interval"
        },
        "daemon": {
          "default": false,
          "title": "Daemon",
          "type": "boolean"
        }
      },
      "required": [
        "hook"
      ],
      "title": "JobConfig",
      "type": "object"
    },
    "PostgresDatabaseConfig": {
      "description": "Postgres database connection config\n\n:param kind: always 'postgres'\n:param host: Host\n:param port: Port\n:param user: User\n:param password: Password\n:param database: Database name\n:param schema_name: Schema name\n:param immune_tables: List of tables to preserve during reindexing\n:param connection_timeout: Connection timeout",
      "properties": {
        "kind": {
          "const": "postgres",
          "title": "Kind"
        },
        "host": {
          "title": "Host",
          "type": "string"
        },
        "user": {
          "default": "postgres",
          "title": "User",
          "type": "string"
        },
        "database": {
          "default": "postgres",
          "title": "Database",
          "type": "string"
        },
        "port": {
          "default": 5432,
          "title": "Port",
          "type": "integer"
        },
        "schema_name": {
          "default": "public",
          "title": "Schema Name",
          "type": "string"
        },
        "password": {
          "default": "",
          "title": "Password",
          "type": "string"
        },
        "immune_tables": {
          "items": {
            "type": "string"
          },
          "title": "Immune Tables",
          "type": "array",
          "uniqueItems": true
        },
        "connection_timeout": {
          "default": 60,
          "title": "Connection Timeout",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "host"
      ],
      "title": "PostgresDatabaseConfig",
      "type": "object"
    },
    "PrometheusConfig": {
      "description": "Config for Prometheus integration.\n\n:param host: Host to bind to\n:param port: Port to bind to\n:param update_interval: Interval to update some metrics in seconds",
      "properties": {
        "host": {
          "title": "Host",
          "type": "string"
        },
        "port": {
          "default": 8000,
          "title": "Port",
          "type": "integer"
        },
        "update_interval": {
          "default": 1.0,
          "title": "Update Interval",
          "type": "number"
        }
      },
      "required": [
        "host"
      ],
      "title": "PrometheusConfig",
      "type": "object"
    },
    "ReindexingAction": {
      "description": "Action that should be performed on reindexing\n\n:param exception: Raise `ReindexingRequiredError` exception.\n:param wipe: Wipe the database and reindex from scratch. (WARNING: This action is irreversible! All indexed data will be lost!)\n:param ignore: Ignore the reindexing cause and continue.",
      "enum": [
        "exception",
        "wipe",
        "ignore"
      ],
      "title": "ReindexingAction",
      "type": "string"
    },
    "SentryConfig": {
      "description": "Config for Sentry integration.\n\n:param dsn: DSN of the Sentry instance\n:param environment: Environment; if not set, guessed from docker/ci/gha/local.\n:param server_name: Server name; defaults to obfuscated hostname.\n:param release: Release version; defaults to DipDup package version.\n:param user_id: User ID; defaults to obfuscated package/environment.\n:param debug: Catch warning messages, increase verbosity.",
      "properties": {
        "dsn": {
          "title": "Dsn",
          "type": "string"
        },
        "environment": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Environment"
        },
        "server_name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Server Name"
        },
        "release": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Release"
        },
        "user_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "User Id"
        },
        "debug": {
          "default": false,
          "title": "Debug",
          "type": "boolean"
        }
      },
      "required": [
        "dsn"
      ],
      "title": "SentryConfig",
      "type": "object"
    },
    "SkipHistory": {
      "description": "Whether to skip indexing big map history and use only current state\n\n:param never: Always index big map historical updates.\n:param once: Skip history once after reindexing; process updates as usual on the next resync.\n:param always: Always skip big map history.",
      "enum": [
        "never",
        "once",
        "always"
      ],
      "title": "SkipHistory",
      "type": "string"
    },
    "SqliteDatabaseConfig": {
      "description": "SQLite connection config\n\n:param kind: always 'sqlite'\n:param path: Path to .sqlite3 file, leave default for in-memory database (`:memory:`)\n:param immune_tables: List of tables to preserve during reindexing",
      "properties": {
        "kind": {
          "const": "sqlite",
          "title": "Kind"
        },
        "path": {
          "default": ":memory:",
          "title": "Path",
          "type": "string"
        },
        "immune_tables": {
          "items": {
            "type": "string"
          },
          "title": "Immune Tables",
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "kind"
      ],
      "title": "SqliteDatabaseConfig",
      "type": "object"
    },
    "TezosContractConfig": {
      "description": "Tezos contract config.\n\n:param kind: Always `tezos`\n:param address: Contract address\n:param code_hash: Contract code hash or address to fetch it from\n:param typename: Alias for the contract script",
      "properties": {
        "kind": {
          "const": "tezos",
          "title": "Kind"
        },
        "address": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Address"
        },
        "code_hash": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Code Hash"
        },
        "typename": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Typename"
        }
      },
      "required": [
        "kind"
      ],
      "title": "TezosContractConfig",
      "type": "object"
    },
    "TezosTzktBigMapsHandlerConfig": {
      "description": "Big map handler config\n\n:param callback: Callback name\n:param contract: Contract to fetch big map from\n:param path: Path to big map (alphanumeric string with dots)",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            }
          ],
          "title": "Contract"
        },
        "path": {
          "title": "Path",
          "type": "string"
        }
      },
      "required": [
        "callback",
        "contract",
        "path"
      ],
      "title": "TezosTzktBigMapsHandlerConfig",
      "type": "object"
    },
    "TezosTzktBigMapsIndexConfig": {
      "description": "Big map index config\n\n:param kind: always 'tezos.tzkt.big_maps'\n:param datasource: Index datasource to fetch big maps with\n:param handlers: Mapping of big map diff handlers\n:param skip_history: Fetch only current big map keys ignoring historical changes\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.big_maps",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/TezosTzktBigMapsHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "skip_history": {
          "allOf": [
            {
              "$ref": "#/$defs/SkipHistory"
            }
          ],
          "default": "never"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource",
        "handlers"
      ],
      "title": "TezosTzktBigMapsIndexConfig",
      "type": "object"
    },
    "TezosTzktDatasourceConfig": {
      "description": "TzKT datasource config\n\n:param kind: always 'tezos.tzkt'\n:param url: Base API URL, e.g. https://api.tzkt.io/\n:param http: HTTP client configuration\n:param buffer_size: Number of levels to keep in FIFO buffer before processing\n:param merge_subscriptions: Whether to merge realtime subscriptions\n:param rollback_depth: Number of blocks to keep in the database to handle reorgs",
      "properties": {
        "kind": {
          "const": "tezos.tzkt",
          "title": "Kind"
        },
        "url": {
          "default": "https://api.tzkt.io",
          "title": "Url",
          "type": "string"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "buffer_size": {
          "default": 0,
          "title": "Buffer Size",
          "type": "integer"
        },
        "merge_subscriptions": {
          "default": false,
          "title": "Merge Subscriptions",
          "type": "boolean"
        },
        "rollback_depth": {
          "default": 2,
          "title": "Rollback Depth",
          "type": "integer"
        }
      },
      "required": [
        "kind"
      ],
      "title": "TezosTzktDatasourceConfig",
      "type": "object"
    },
    "TezosTzktEventsHandlerConfig": {
      "description": "Event handler config\n\n:param callback: Callback name\n:param contract: Contract which emits event\n:param tag: Event tag",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            }
          ],
          "title": "Contract"
        },
        "tag": {
          "title": "Tag",
          "type": "string"
        }
      },
      "required": [
        "callback",
        "contract",
        "tag"
      ],
      "title": "TezosTzktEventsHandlerConfig",
      "type": "object"
    },
    "TezosTzktEventsIndexConfig": {
      "description": "Event index config\n\n:param kind: always 'tezos.tzkt.events'\n:param datasource: Datasource config\n:param handlers: Event handlers\n:param first_level: First block level to index\n:param last_level: Last block level to index",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.events",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/TezosTzktEventsHandlerConfig"
              },
              {
                "$ref": "#/$defs/TezosTzktEventsUnknownEventHandlerConfig"
              }
            ]
          },
          "title": "Handlers",
          "type": "array"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource"
      ],
      "title": "TezosTzktEventsIndexConfig",
      "type": "object"
    },
    "TezosTzktEventsUnknownEventHandlerConfig": {
      "description": "Unknown event handler config\n\n:param callback: Callback name\n:param contract: Contract which emits event",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            }
          ],
          "title": "Contract"
        }
      },
      "required": [
        "callback",
        "contract"
      ],
      "title": "TezosTzktEventsUnknownEventHandlerConfig",
      "type": "object"
    },
    "TezosTzktHeadIndexConfig": {
      "description": "Head block index config\n\n:param kind: always 'tezos.tzkt.head'\n:param callback: Callback name\n:param datasource: Index datasource to receive head blocks\n:param handlers: Mapping of head block handlers",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.head",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "callback": {
          "title": "Callback",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "datasource",
        "callback"
      ],
      "title": "TezosTzktHeadIndexConfig",
      "type": "object"
    },
    "TezosTzktOperationType": {
      "description": "Type of blockchain operation\n\n:param transaction: transaction\n:param origination: origination\n:param migration: migration\n:param sr_execute: sr_execute",
      "enum": [
        "transaction",
        "origination",
        "migration",
        "sr_execute"
      ],
      "title": "TezosTzktOperationType",
      "type": "string"
    },
    "TezosTzktOperationsHandlerConfig": {
      "description": "Operation handler config\n\n:param callback: Callback name\n:param pattern: Filters to match operation groups",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "pattern": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/TezosTzktOperationsHandlerTransactionPatternConfig"
              },
              {
                "$ref": "#/$defs/TezosTzktOperationsHandlerOriginationPatternConfig"
              },
              {
                "$ref": "#/$defs/TezosTzktOperationsHandlerSmartRollupExecutePatternConfig"
              }
            ]
          },
          "title": "Pattern",
          "type": "array"
        }
      },
      "required": [
        "callback",
        "pattern"
      ],
      "title": "TezosTzktOperationsHandlerConfig",
      "type": "object"
    },
    "TezosTzktOperationsHandlerOriginationPatternConfig": {
      "description": "Origination handler pattern config\n\n:param type: always 'origination'\n:param source: Match operations by source contract alias\n:param originated_contract: Match origination of exact contract\n:param optional: Whether can operation be missing in operation group\n:param strict: Match operations by storage only or by the whole code\n:param alias: Alias for operation (helps to avoid duplicates)",
      "properties": {
        "type": {
          "const": "origination",
          "default": "origination",
          "title": "Type"
        },
        "source": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Source"
        },
        "originated_contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Originated Contract"
        },
        "optional": {
          "default": false,
          "title": "Optional",
          "type": "boolean"
        },
        "strict": {
          "default": false,
          "title": "Strict",
          "type": "boolean"
        },
        "alias": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Alias"
        }
      },
      "title": "TezosTzktOperationsHandlerOriginationPatternConfig",
      "type": "object"
    },
    "TezosTzktOperationsHandlerSmartRollupExecutePatternConfig": {
      "description": "Operation handler pattern config\n\n:param type: always 'sr_execute'\n:param source: Match operations by source contract alias\n:param destination: Match operations by destination contract alias\n:param optional: Whether can operation be missing in operation group\n:param alias: Alias for operation (helps to avoid duplicates)",
      "properties": {
        "type": {
          "const": "sr_execute",
          "default": "sr_execute",
          "title": "Type"
        },
        "source": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Source"
        },
        "destination": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Destination"
        },
        "optional": {
          "default": false,
          "title": "Optional",
          "type": "boolean"
        },
        "alias": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Alias"
        }
      },
      "title": "TezosTzktOperationsHandlerSmartRollupExecutePatternConfig",
      "type": "object"
    },
    "TezosTzktOperationsHandlerTransactionPatternConfig": {
      "description": "Transaction handler pattern config\n\n:param type: always 'transaction'\n:param source: Match operations by source contract alias\n:param destination: Match operations by destination contract alias\n:param entrypoint: Match operations by contract entrypoint\n:param optional: Whether can operation be missing in operation group\n:param alias: Alias for operation (helps to avoid duplicates)",
      "properties": {
        "type": {
          "const": "transaction",
          "default": "transaction",
          "title": "Type"
        },
        "source": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Source"
        },
        "destination": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Destination"
        },
        "entrypoint": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Entrypoint"
        },
        "optional": {
          "default": false,
          "title": "Optional",
          "type": "boolean"
        },
        "alias": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Alias"
        }
      },
      "title": "TezosTzktOperationsHandlerTransactionPatternConfig",
      "type": "object"
    },
    "TezosTzktOperationsIndexConfig": {
      "description": "Operation index config\n\n:param kind: always 'tezos.tzkt.operations'\n:param datasource: Alias of index datasource in `datasources` section\n:param handlers: List of indexer handlers\n:param types: Types of transaction to fetch\n:param contracts: Aliases of contracts being indexed in `contracts` section\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.operations",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/TezosTzktOperationsHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "contracts": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/TezosContractConfig"
              }
            ]
          },
          "title": "Contracts",
          "type": "array"
        },
        "types": {
          "default": [
            "transaction"
          ],
          "items": {
            "$ref": "#/$defs/TezosTzktOperationType"
          },
          "title": "Types",
          "type": "array"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource",
        "handlers"
      ],
      "title": "TezosTzktOperationsIndexConfig",
      "type": "object"
    },
    "TezosTzktOperationsUnfilteredIndexConfig": {
      "description": "Operation index config\n\n:param kind: always 'tezos.tzkt.operations_unfiltered'\n:param datasource: Alias of index datasource in `datasources` section\n:param callback: Callback name\n:param types: Types of transaction to fetch\n\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.operations_unfiltered",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "types": {
          "default": [
            "transaction"
          ],
          "items": {
            "$ref": "#/$defs/TezosTzktOperationType"
          },
          "title": "Types",
          "type": "array"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource",
        "callback"
      ],
      "title": "TezosTzktOperationsUnfilteredIndexConfig",
      "type": "object"
    },
    "TezosTzktTokenBalancesHandlerConfig": {
      "description": "Token balance handler config\n\n:param callback: Callback name\n:param contract: Filter by contract\n:param token_id: Filter by token ID",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Contract"
        },
        "token_id": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Token Id"
        }
      },
      "required": [
        "callback"
      ],
      "title": "TezosTzktTokenBalancesHandlerConfig",
      "type": "object"
    },
    "TezosTzktTokenBalancesIndexConfig": {
      "description": "Token balance index config\n\n:param kind: always 'tezos.tzkt.token_balances'\n:param datasource: Index datasource to use\n:param handlers: Mapping of token transfer handlers\n\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.token_balances",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/TezosTzktTokenBalancesHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource"
      ],
      "title": "TezosTzktTokenBalancesIndexConfig",
      "type": "object"
    },
    "TezosTzktTokenTransfersHandlerConfig": {
      "description": "Token transfer handler config\n\n:param callback: Callback name\n:param contract: Filter by contract\n:param token_id: Filter by token ID\n:param from_: Filter by sender\n:param to: Filter by recipient",
      "properties": {
        "callback": {
          "title": "Callback",
          "type": "string"
        },
        "contract": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Contract"
        },
        "token_id": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Token Id"
        },
        "from_": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "From "
        },
        "to": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosContractConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "To"
        }
      },
      "required": [
        "callback"
      ],
      "title": "TezosTzktTokenTransfersHandlerConfig",
      "type": "object"
    },
    "TezosTzktTokenTransfersIndexConfig": {
      "description": "Token transfer index config\n\n:param kind: always 'tezos.tzkt.token_transfers'\n:param datasource: Index datasource to use\n:param handlers: Mapping of token transfer handlers\n\n:param first_level: Level to start indexing from\n:param last_level: Level to stop indexing at",
      "properties": {
        "kind": {
          "const": "tezos.tzkt.token_transfers",
          "title": "Kind"
        },
        "datasource": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/TezosTzktDatasourceConfig"
            }
          ],
          "title": "Datasource"
        },
        "handlers": {
          "items": {
            "$ref": "#/$defs/TezosTzktTokenTransfersHandlerConfig"
          },
          "title": "Handlers",
          "type": "array"
        },
        "first_level": {
          "default": 0,
          "title": "First Level",
          "type": "integer"
        },
        "last_level": {
          "default": 0,
          "title": "Last Level",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "datasource"
      ],
      "title": "TezosTzktTokenTransfersIndexConfig",
      "type": "object"
    },
    "TzipMetadataDatasourceConfig": {
      "description": "DipDup Metadata datasource config\n\n:param kind: always 'tzip_metadata'\n:param network: Network name, e.g. mainnet, ghostnet, etc.\n:param url: GraphQL API URL, e.g. https://metadata.dipdup.net\n:param http: HTTP client configuration",
      "properties": {
        "kind": {
          "const": "tzip_metadata",
          "title": "Kind"
        },
        "network": {
          "$ref": "#/$defs/TzipMetadataNetwork"
        },
        "url": {
          "default": "https://metadata.dipdup.net",
          "title": "Url",
          "type": "string"
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/$defs/HttpConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "kind",
        "network"
      ],
      "title": "TzipMetadataDatasourceConfig",
      "type": "object"
    },
    "TzipMetadataNetwork": {
      "description": "Tezos network enum for TZIP-16 metadata.\n\n:param mainnet: mainnet\n:param ghostnet: ghostnet\n:param mumbainet: mumbainet\n:param nairobinet: nairobinet\n:param oxfordnet: oxfordnet",
      "enum": [
        "mainnet",
        "ghostnet",
        "mumbainet",
        "nairobinet",
        "oxfordnet"
      ],
      "title": "TzipMetadataNetwork",
      "type": "string"
    }
  },
  "description": "Main indexer config\n\n:param spec_version: Version of config specification, currently always `2.0`\n:param package: Name of indexer's Python package, existing or not\n:param datasources: Mapping of datasource aliases and datasource configs\n:param database: Database config\n:param contracts: Mapping of contract aliases and contract configs\n:param indexes: Mapping of index aliases and index configs\n:param templates: Mapping of template aliases and index templates\n:param jobs: Mapping of job aliases and job configs\n:param hooks: Mapping of hook aliases and hook configs\n:param hasura: Hasura integration config\n:param sentry: Sentry integration config\n:param prometheus: Prometheus integration config\n:param api: Management API config\n:param advanced: Advanced config\n:param custom: User-defined configuration to use in callbacks\n:param logging: Modify logging verbosity",
  "properties": {
    "spec_version": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ],
      "title": "Spec Version"
    },
    "package": {
      "title": "Package",
      "type": "string"
    },
    "datasources": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/CoinbaseDatasourceConfig"
          },
          {
            "$ref": "#/$defs/AbiEtherscanDatasourceConfig"
          },
          {
            "$ref": "#/$defs/HttpDatasourceConfig"
          },
          {
            "$ref": "#/$defs/IpfsDatasourceConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidDatasourceConfig"
          },
          {
            "$ref": "#/$defs/EvmNodeDatasourceConfig"
          },
          {
            "$ref": "#/$defs/TzipMetadataDatasourceConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktDatasourceConfig"
          }
        ]
      },
      "title": "Datasources",
      "type": "object"
    },
    "database": {
      "anyOf": [
        {
          "$ref": "#/$defs/SqliteDatabaseConfig"
        },
        {
          "$ref": "#/$defs/PostgresDatabaseConfig"
        }
      ],
      "title": "Database"
    },
    "contracts": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/EvmContractConfig"
          },
          {
            "$ref": "#/$defs/TezosContractConfig"
          }
        ]
      },
      "title": "Contracts",
      "type": "object"
    },
    "indexes": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/TezosTzktBigMapsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktEventsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktHeadIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktOperationsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktOperationsUnfilteredIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktTokenTransfersIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktTokenBalancesIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidEventsIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidTracesIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidTransactionsIndexConfig"
          },
          {
            "$ref": "#/$defs/IndexTemplateConfig"
          }
        ]
      },
      "title": "Indexes",
      "type": "object"
    },
    "templates": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/TezosTzktBigMapsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktEventsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktHeadIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktOperationsIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktOperationsUnfilteredIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktTokenTransfersIndexConfig"
          },
          {
            "$ref": "#/$defs/TezosTzktTokenBalancesIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidEventsIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidTracesIndexConfig"
          },
          {
            "$ref": "#/$defs/EvmSubsquidTransactionsIndexConfig"
          }
        ]
      },
      "title": "Templates",
      "type": "object"
    },
    "jobs": {
      "additionalProperties": {
        "$ref": "#/$defs/JobConfig"
      },
      "title": "Jobs",
      "type": "object"
    },
    "hooks": {
      "additionalProperties": {
        "$ref": "#/$defs/HookConfig"
      },
      "title": "Hooks",
      "type": "object"
    },
    "hasura": {
      "anyOf": [
        {
          "$ref": "#/$defs/HasuraConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "sentry": {
      "anyOf": [
        {
          "$ref": "#/$defs/SentryConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "prometheus": {
      "anyOf": [
        {
          "$ref": "#/$defs/PrometheusConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "api": {
      "anyOf": [
        {
          "$ref": "#/$defs/ApiConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "advanced": {
      "$ref": "#/$defs/AdvancedConfig"
    },
    "custom": {
      "title": "Custom",
      "type": "object"
    },
    "logging": {
      "anyOf": [
        {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "type": "object"
        },
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ],
      "default": "INFO",
      "title": "Logging"
    }
  },
  "required": [],
  "title": "DipDupConfig",
  "type": "object"
}