# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Dict, Optional, Union

from pydantic import BaseModel, Extra


class DexLambdas(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class Metadata(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class LedgerItem(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class UserReward(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Veto(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Voter(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Vote(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Storage1(BaseModel):
    current_candidate: Optional[str]
    current_delegated: Optional[str]
    invariant: str
    last_update_time: str
    last_veto: str
    ledger: Union[int, LedgerItem]
    period_finish: str
    reward: str
    reward_paid: str
    reward_per_sec: str
    reward_per_share: str
    tez_pool: str
    token_address: str
    token_id: str
    token_pool: str
    total_reward: str
    total_supply: str
    total_votes: str
    user_rewards: Union[int, UserReward]
    veto: str
    vetos: Union[int, Veto]
    voters: Union[int, Voter]
    votes: Union[int, Vote]


class TokenLambdas(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class Storage(BaseModel):
    dex_lambdas: Dict[str, DexLambdas]
    metadata: Dict[str, Metadata]
    storage: Storage1
    token_lambdas: Dict[str, TokenLambdas]
