# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra


class Key(BaseModel):
    address: str
    nat: str


class LedgerItem(BaseModel):
    key: Key
    value: str


class Key1(BaseModel):
    owner: str
    operator: str


class Operator(BaseModel):
    key: Key1
    value: Dict[str, Any]


class MigrationStatu(BaseModel):
    notInMigration: Dict[str, Any]


class MigrationStatu1(BaseModel):
    migratingTo: str


class MigrationStatu2(BaseModel):
    migratedTo: str


class RegistryItem(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExtraModel(BaseModel):
    registry: Union[int, RegistryItem]
    proposal_receivers: List[str]
    frozen_scale_value: str
    frozen_extra_value: str
    slash_scale_value: str
    slash_division_value: str
    max_proposal_size: str


class DiffItem(BaseModel):
    key: str
    new_value: Optional[str]


class ProposalType0(BaseModel):
    agora_post_id: str
    diff: List[DiffItem]


class Metadatum(BaseModel):
    proposal_type_0: ProposalType0


class ProposalType1(BaseModel):
    frozen_scale_value: Optional[str]
    frozen_extra_value: Optional[str]
    slash_scale_value: Optional[str]
    slash_division_value: Optional[str]
    max_proposal_size: Optional[str]


class Metadatum1(BaseModel):
    proposal_type_1: ProposalType1


class Metadatum2(BaseModel):
    receivers_0: List[str]


class Metadatum3(BaseModel):
    receivers_1: List[str]


class Voter(BaseModel):
    address: str
    nat: str


class Proposals(BaseModel):
    class Config:
        extra = Extra.allow

    upvotes: str
    downvotes: str
    start_date: str
    metadata: Union[Metadatum, Metadatum1, Metadatum2, Metadatum3]
    proposer: str
    proposer_frozen_token: str
    voters: List[Voter]


class ProposalKeyListSortByDateItem(BaseModel):
    timestamp: str
    bytes: str


class Metadata(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class TotalSupply(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class Storage(BaseModel):
    ledger: List[LedgerItem]
    operators: List[Operator]
    token_address: str
    admin: str
    pending_owner: str
    migration_status: Union[MigrationStatu, MigrationStatu1, MigrationStatu2]
    voting_period: str
    quorum_threshold: str
    extra: ExtraModel
    proposals: Dict[str, Proposals]
    proposal_key_list_sort_by_date: List[ProposalKeyListSortByDateItem]
    permits_counter: str
    metadata: Dict[str, Metadata]
    total_supply: Dict[str, TotalSupply]
