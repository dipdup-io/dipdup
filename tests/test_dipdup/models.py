# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Union
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Extra, Field


class ResourceMap(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    rate: str


class ResourceCollectorStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    administrator: str
    current_user: Optional[str]
    default_start_time: str
    generation_rate: str
    managers: List[str]
    metadata: Dict[str, str]
    nft_registry: str
    paused: bool
    resource_map: Dict[str, ResourceMap]
    resource_registry: str
    tezotop_collection: Dict[str, str]


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address_0: str
    address_1: str
    nat: str


class Operator(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: Dict[str, Any]


class TokenMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_info: Dict[str, str]


class Assets(BaseModel):
    class Config:
        extra = Extra.forbid

    ledger: Dict[str, str]
    next_token_id: str
    operators: List[Operator]
    token_metadata: Dict[str, TokenMetadata]


class FtzFunStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    assets: Assets
    metadata: Dict[str, str]


class AsdfStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    big_map: Dict[str, str]
    bool: bool
    lambda_: str = Field(..., alias='lambda')
    nat: str


class QwerStorageItem(BaseModel):
    class Config:
        extra = Extra.forbid

    L: str


class QwerStorageItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    R: Optional[Union[int, Dict[str, str]]] = {}


class QwerStorage(BaseModel):
    __root__: List[List[Union[QwerStorageItem, QwerStorageItem1]]]
